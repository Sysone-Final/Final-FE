name: Deploy to VM Instance

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Build project
      run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/final-fe:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to GCP VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.GCP_VM_HOST }}
        username: ${{ secrets.GCP_VM_USERNAME }}
        key: ${{ secrets.GCP_VM_SSH_KEY }}
        script: |
          cd ~
          
          # 서버 초기 설정 확인 및 설치
          if ! command -v docker &> /dev/null || ! command -v docker-compose &> /dev/null; then
            echo "🚀 서버 초기 설정을 시작합니다..."
            
            # 시스템 업데이트
            sudo apt update && sudo apt upgrade -y
            
            # Docker 설치
            echo "Docker 설치 중..."
            sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt update
            sudo apt install -y docker-ce docker-ce-cli containerd.io
            
            # Docker 서비스 시작
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            
            # Docker Compose 설치
            echo "Docker Compose 설치 중..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            
            # 방화벽 설정
            echo "방화벽 설정 중..."
            sudo ufw allow OpenSSH
            sudo ufw allow 80/tcp  
            sudo ufw allow 443/tcp
            sudo ufw --force enable
            
            # 유틸리티 설치
            sudo apt install -y htop curl wget git vim net-tools
            
            echo "✅ 서버 초기 설정 완료!"
          else
            echo "✅ Docker와 Docker Compose가 이미 설치되어 있습니다."
          fi
          
          # Docker Compose 파일 생성
          cat > docker-compose.yml << EOF
          version: '3.8'
          
          services:
            web:
              image: ${{ secrets.DOCKER_USERNAME }}/final-fe:latest
              ports:
                - "80:80"
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          EOF
          
          # 기존 컨테이너 중지 및 제거
          sudo docker-compose down || true
          
          # 오래된 이미지 제거
          sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/final-fe:latest || true
          
          # 최신 이미지 풀 및 실행
          sudo docker-compose pull
          sudo docker-compose up -d
          
          # 사용하지 않는 이미지 정리
          sudo docker image prune -f
          
          # 배포 상태 확인
          sleep 10
          sudo docker-compose ps
          
          echo "✅ GCP VM 배포 완료: http://serverway.shop"
